generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rol {
  idRol     Int       @id @default(autoincrement()) @map("idRol")
  nombreRol RolNombre @unique @map("nombreRol")
  usuarios  Usuario[]

  @@map("Rol")
}

/// *
/// * Tabla Usuarios
model Usuario {
  idUsuario              Int                      @id @default(autoincrement()) @map("idUsuario")
  usuario                String                   @unique @map("usuario")
  email                  String?                  @unique @map("email")
  passwordHash           String
  nombreApellido         String                   @map("nombre_apellido")
  rolId                  Int                      @map("Rol_idRol")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  estaActivo             Boolean                  @default(true) @map("esta_activo")
  ultimoLoginAt          DateTime?                @map("ultimo_login_at")
  profesional            Profesional?
  rol                    Rol                      @relation(fields: [rolId], references: [idRol])
  citasCreadas           Cita[]                   @relation("CitaCreadaPor")
  citasCanceladas        Cita[]                   @relation("CitaCanceladaPor")
  CitaEstadoHistorial    CitaEstadoHistorial[]
  BloqueoAgenda          BloqueoAgenda[]
  Consulta               Consulta[]
  ConsultaAdjunto        Adjunto[]
  TreatmentPlan          TreatmentPlan[]
  ClinicalHistoryEntry   ClinicalHistoryEntry[]
  PatientDiagnosis       PatientDiagnosis[]
  PatientAllergy         PatientAllergy[]
  PatientMedication      PatientMedication[]
  PatientVitals          PatientVitals[]
  OdontogramSnapshot     OdontogramSnapshot[]
  PeriodontogramSnapshot PeriodontogramSnapshot[]
  Adjunto                Adjunto[]                @relation("AdjuntoUploadedBy")

  @@index([rolId])
  @@map("Usuario")
}

model Profesional {
  idProfesional  Int                       @id @default(autoincrement()) @map("idProfesional")
  numeroLicencia String?                   @unique @map("numeroLicencia")
  estaActivo     Boolean                   @default(true) @map("estaActivo")
  userId         Int                       @unique @map("Usuario_idUsuario")
  personaId      Int                       @unique @map("Persona_idPersona")
  createdAt      DateTime                  @default(now()) @map("created_at")
  disponibilidad Json?                     @map("disponibilidad")
  updatedAt      DateTime                  @updatedAt @map("updated_at")
  persona        Persona                   @relation(fields: [personaId], references: [idPersona])
  usuario        Usuario                   @relation(fields: [userId], references: [idUsuario], onDelete: Cascade)
  especialidades ProfesionalEspecialidad[]
  Cita           Cita[]
  BloqueoAgenda  BloqueoAgenda[]
  Consulta       Consulta[]

  @@index([estaActivo])
  @@map("Profesional")
}

model Persona {
  idPersona           Int                   @id @default(autoincrement()) @map("idPersona")
  nombres             String                @map("nombres")
  apellidos           String                @map("apellidos")
  fechaNacimiento     DateTime?             @map("fecha_nacimiento")
  genero              Genero?               @map("genero")
  direccion           String?               @map("direccion")
  estaActivo          Boolean               @default(true) @map("esta_activo")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  documento           Documento?
  contactos           PersonaContacto[]
  profesionales       Profesional?
  paciente            Paciente?
  PacienteResponsable PacienteResponsable[]

  @@index([nombres, apellidos])
  @@map("Persona")
}

model Documento {
  idDocumento      Int           @id @default(autoincrement()) @map("idDocumento")
  personaId        Int           @unique @map("Persona_idPersona")
  tipo             TipoDocumento @map("tipo")
  numero           String        @map("numero")
  paisEmision      String?       @map("pais_emision")
  fechaEmision     DateTime?     @map("fecha_emision")
  fechaVencimiento DateTime?     @map("fecha_vencimiento")
  ruc              String?       @map("ruc")
  persona          Persona       @relation(fields: [personaId], references: [idPersona], onDelete: Cascade)

  @@unique([tipo, numero, paisEmision])
  @@map("Documento")
}

model PersonaContacto {
  idContacto              Int          @id @default(autoincrement()) @map("idContacto")
  personaId               Int          @map("Persona_idPersona")
  tipo                    TipoContacto @map("tipo")
  valorRaw                String       @map("valor_raw")
  valorNorm               String       @map("valor_norm")
  label                   String?      @map("label")
  whatsappCapaz           Boolean?     @map("whatsapp_capaz")
  smsCapaz                Boolean?     @map("sms_capaz")
  esPrincipal             Boolean      @default(false) @map("es_principal")
  esPreferidoRecordatorio Boolean      @default(false) @map("es_pref_recordatorio")
  esPreferidoCobranza     Boolean      @default(false) @map("es_pref_cobranza")
  activo                  Boolean      @default(true) @map("activo")
  createdAt               DateTime     @default(now()) @map("created_at")
  updatedAt               DateTime     @updatedAt @map("updated_at")
  persona                 Persona      @relation(fields: [personaId], references: [idPersona], onDelete: Cascade)

  @@unique([personaId, tipo, valorNorm])
  @@index([personaId, tipo, esPrincipal])
  @@index([personaId, esPreferidoRecordatorio])
  @@index([personaId, esPreferidoCobranza])
  @@map("PersonaContacto")
}

model Especialidad {
  idEspecialidad Int                       @id @default(autoincrement()) @map("idEspecialidad")
  nombre         String                    @unique @map("nombre")
  descripcion    String?                   @map("descripcion")
  isActive       Boolean                   @default(true) @map("is_active")
  profesionales  ProfesionalEspecialidad[]

  @@map("Especialidad")
}

model ProfesionalEspecialidad {
  profesionalId  Int
  especialidadId Int
  especialidad   Especialidad @relation(fields: [especialidadId], references: [idEspecialidad])
  profesional    Profesional  @relation(fields: [profesionalId], references: [idProfesional], onDelete: Cascade)

  @@id([profesionalId, especialidadId])
  @@map("ProfesionalEspecialidad")
}

enum RolNombre {
  ADMIN
  ODONT
  RECEP
}

enum Genero {
  MASCULINO
  FEMENINO
  OTRO
  NO_ESPECIFICADO
}

enum TipoDocumento {
  CI
  DNI
  PASAPORTE
  RUC
  OTRO
}

enum TipoContacto {
  PHONE
  EMAIL
}

enum RelacionPaciente {
  PADRE
  MADRE
  TUTOR
  CONYUGE
  FAMILIAR
  OTRO
}

enum TipoCita {
  CONSULTA
  LIMPIEZA
  ENDODONCIA
  EXTRACCION
  URGENCIA
  ORTODONCIA
  CONTROL
  OTRO
}

enum EstadoCita {
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// ======== MODELOS ========

// Paciente
model Paciente {
  idPaciente Int      @id @default(autoincrement()) @map("idPaciente")
  personaId  Int      @unique @map("Persona_idPersona")
  notas      String?  @map("notas")
  estaActivo Boolean  @default(true) @map("esta_activo")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  persona                Persona                  @relation(fields: [personaId], references: [idPersona])
  responsables           PacienteResponsable[]
  citas                  Cita[] // <— importante: relación inversa (solo lectura)
  TreatmentPlan          TreatmentPlan[]
  ClinicalHistoryEntry   ClinicalHistoryEntry[]
  PatientDiagnosis       PatientDiagnosis[]
  PatientAllergy         PatientAllergy[]
  PatientMedication      PatientMedication[]
  PatientVitals          PatientVitals[]
  OdontogramSnapshot     OdontogramSnapshot[]
  PeriodontogramSnapshot PeriodontogramSnapshot[]
  Adjunto                Adjunto[]

  @@map("Paciente")
}

// Responsable de pago / tutor
model PacienteResponsable {
  idPacienteResponsable Int              @id @default(autoincrement()) @map("idPacienteResponsable")
  pacienteId            Int              @map("Paciente_idPaciente")
  personaId             Int              @map("Persona_idPersona")
  relacion              RelacionPaciente @map("relacion")
  esPrincipal           Boolean          @default(false) @map("es_principal")
  autoridadLegal        Boolean          @default(false) @map("autoridad_legal")
  vigenteDesde          DateTime         @default(now()) @map("vigente_desde")
  vigenteHasta          DateTime?        @map("vigente_hasta")
  notas                 String?          @map("notas")
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")

  paciente Paciente @relation(fields: [pacienteId], references: [idPaciente], onDelete: Cascade)
  persona  Persona  @relation(fields: [personaId], references: [idPersona])

  @@index([pacienteId, personaId])
  @@map("PacienteResponsable")
}

// Consultorio / Box
model Consultorio {
  idConsultorio Int      @id @default(autoincrement()) @map("idConsultorio")
  nombre        String   @unique @map("nombre")
  colorHex      String?  @map("color_hex")
  activo        Boolean  @default(true) @map("activo")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  citas         Cita[]
  BloqueoAgenda BloqueoAgenda[]

  @@map("Consultorio")
}

// Cita / Turno
model Cita {
  idCita Int @id @default(autoincrement()) @map("idCita")

  // FKs
  pacienteId      Int  @map("Paciente_idPaciente")
  profesionalId   Int  @map("Profesional_idProfesional")
  consultorioId   Int? @map("Consultorio_idConsultorio")
  createdByUserId Int  @map("Usuario_idUsuario_createdBy")

  // Ventana y clasificación
  inicio          DateTime   @map("inicio")
  fin             DateTime   @map("fin")
  duracionMinutos Int        @default(30) @map("duracion_minutos")
  tipo            TipoCita   @map("tipo")
  estado          EstadoCita @default(SCHEDULED) @map("estado")

  // Descripción
  motivo String? @map("motivo")
  notas  String? @map("notas")

  // Reprogramaciones (self-relation)
  reprogramadaDesdeId Int?   @map("Cita_idCita_reprog_desde")
  reprogramadaDesde   Cita?  @relation("CitaReprogramacion", fields: [reprogramadaDesdeId], references: [idCita])
  reprogramaciones    Cita[] @relation("CitaReprogramacion")

  // Timestamps de flujo (útiles para reporting)
  checkedInAt DateTime? @map("checked_in_at")
  startedAt   DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")

  // Cancelación (quién, cuándo, por qué)
  cancelReason      MotivoCancelacion? @map("cancel_reason")
  cancelledAt       DateTime?          @map("cancelled_at")
  cancelledByUserId Int?               @map("Usuario_idUsuario_cancelledBy")

  // Metadatos/Extensión (opcional)
  metadatos Json? @map("metadatos")

  // Auditoría
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  paciente    Paciente     @relation(fields: [pacienteId], references: [idPaciente])
  profesional Profesional  @relation(fields: [profesionalId], references: [idProfesional])
  consultorio Consultorio? @relation(fields: [consultorioId], references: [idConsultorio])

  // Importante: hay 2 relaciones a Usuario, por eso nombramos ambas
  creadoPor           Usuario               @relation("CitaCreadaPor", fields: [createdByUserId], references: [idUsuario])
  canceladoPor        Usuario?              @relation("CitaCanceladaPor", fields: [cancelledByUserId], references: [idUsuario])
  CitaEstadoHistorial CitaEstadoHistorial[]
  Consulta            Consulta[]

  // Índices
  @@index([profesionalId, inicio])
  @@index([pacienteId, inicio])
  @@index([consultorioId, inicio])
  @@index([estado, inicio])
  @@index([inicio]) // acelerador para ventanas por fecha
  @@map("Cita")
}

enum MotivoCancelacion {
  PACIENTE
  PROFESIONAL
  CLINICA
  EMERGENCIA
  OTRO
}

enum TipoBloqueoAgenda {
  VACACIONES
  MANTENIMIENTO
  CAPACITACION
  BLOQUEO_MANUAL
  OTRO
}

model CitaEstadoHistorial {
  idCitaEstadoHistorial Int         @id @default(autoincrement()) @map("idCitaEstadoHistorial")
  citaId                Int         @map("Cita_idCita")
  estadoPrevio          EstadoCita? @map("estado_previo")
  estadoNuevo           EstadoCita  @map("estado_nuevo")
  nota                  String?     @map("nota")
  changedByUserId       Int?        @map("Usuario_idUsuario_changedBy")
  changedAt             DateTime    @default(now()) @map("changed_at")

  cita        Cita     @relation(fields: [citaId], references: [idCita], onDelete: Cascade)
  cambiadoPor Usuario? @relation(fields: [changedByUserId], references: [idUsuario])

  @@index([citaId, changedAt])
  @@index([estadoNuevo, changedAt])
  @@map("CitaEstadoHistorial")
}

model BloqueoAgenda {
  idBloqueoAgenda Int               @id @default(autoincrement()) @map("idBloqueoAgenda")
  profesionalId   Int?              @map("Profesional_idProfesional")
  consultorioId   Int?              @map("Consultorio_idConsultorio")
  desde           DateTime          @map("desde")
  hasta           DateTime          @map("hasta")
  tipo            TipoBloqueoAgenda @map("tipo")
  motivo          String?           @map("motivo")
  recurrencia     Json?             @map("recurrencia") // RRule u otro
  activo          Boolean           @default(true) @map("activo")

  createdByUserId Int      @map("Usuario_idUsuario_createdBy")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  profesional Profesional? @relation(fields: [profesionalId], references: [idProfesional])
  consultorio Consultorio? @relation(fields: [consultorioId], references: [idConsultorio])
  creadoPor   Usuario      @relation(fields: [createdByUserId], references: [idUsuario])

  @@index([profesionalId, desde])
  @@index([consultorioId, desde])
  @@index([activo, desde])
  @@map("BloqueoAgenda")
}

enum ConsultaEstado {
  DRAFT
  FINAL
}

enum DienteSuperficie {
  O // Oclusal
  M // Mesial
  D // Distal
  V // Vestibular/Bucal
  L // Lingual/Palatino
  MO
  DO
  VO
  LO
  MOD
  MV
  DL
  // agrega combinaciones que uses en clínica
}

enum AdjuntoTipo {
  XRAY
  INTRAORAL_PHOTO
  EXTRAORAL_PHOTO
  IMAGE
  DOCUMENT
  PDF
  LAB_REPORT
  OTHER
}

enum AccessMode {
  PUBLIC
  AUTHENTICATED
}

enum TreatmentStepStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DEFERRED
}

model ProcedimientoCatalogo {
  idProcedimiento    Int      @id @default(autoincrement()) @map("idProcedimiento")
  code               String   @unique @map("code") // p.ej. C11, ADA code, interno, etc.
  nombre             String   @map("nombre")
  descripcion        String?  @map("descripcion")
  defaultDurationMin Int?     @map("default_duration_min")
  defaultPriceCents  Int?     @map("default_price_cents")
  aplicaDiente       Boolean  @default(false) @map("aplica_diente")
  aplicaSuperficie   Boolean  @default(false) @map("aplica_superficie")
  activo             Boolean  @default(true) @map("activo")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relaciones
  pasos          TreatmentStep[]
  procedimientos ConsultaProcedimiento[]

  @@map("ProcedimientoCatalogo")
}

model Consulta {
  // PK=FK a Cita (1:1)
  citaId Int  @id @map("Cita_idCita")
  cita   Cita @relation(fields: [citaId], references: [idCita], onDelete: Cascade)

  performedById Int         @map("Profesional_idProfesional")
  performedBy   Profesional @relation(fields: [performedById], references: [idProfesional])

  status     ConsultaEstado @default(DRAFT) @map("status")
  startedAt  DateTime?      @map("started_at")
  finishedAt DateTime?      @map("finished_at")

  reason        String? @map("reason")
  diagnosis     String? @map("diagnosis")
  clinicalNotes String? @map("clinical_notes")

  createdByUserId Int     @map("Usuario_idUsuario_createdBy")
  createdBy       Usuario @relation(fields: [createdByUserId], references: [idUsuario])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Hijos
  procedimientos         ConsultaProcedimiento[]
  adjuntos               Adjunto[]
  ClinicalHistoryEntry   ClinicalHistoryEntry[]
  PatientDiagnosis       PatientDiagnosis[]
  PatientVitals          PatientVitals[]
  OdontogramSnapshot     OdontogramSnapshot[]
  PeriodontogramSnapshot PeriodontogramSnapshot[]

  @@map("Consulta")
}

model ConsultaProcedimiento {
  idConsultaProcedimiento Int @id @default(autoincrement()) @map("idConsultaProcedimiento")

  consultaId Int      @map("Consulta_Cita_idCita")
  consulta   Consulta @relation(fields: [consultaId], references: [citaId], onDelete: Cascade)

  // Definición del acto: catálogo o texto libre (elige uno; ver CHECK más abajo)
  procedureId Int?                   @map("Procedimiento_idProcedimiento")
  catalogo    ProcedimientoCatalogo? @relation(fields: [procedureId], references: [idProcedimiento], onDelete: SetNull)
  serviceType String?                @map("service_type")

  // Diente / superficie (opcionales según el procedimiento)
  toothNumber  Int?              @map("tooth_number") // 1–32 / 51–85
  toothSurface DienteSuperficie? @map("tooth_surface")

  // Cantidad y costos aplicados
  quantity       Int  @default(1) @map("quantity")
  unitPriceCents Int? @map("unit_price_cents")
  totalCents     Int? @map("total_cents")

  // Vínculo con planificación (si ejecuta una etapa)
  treatmentStepId Int?           @map("TreatmentStep_idTreatmentStep")
  treatmentStep   TreatmentStep? @relation(fields: [treatmentStepId], references: [idTreatmentStep], onDelete: SetNull)

  resultNotes String? @map("result_notes")

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  ConsultaAdjunto Adjunto[]

  @@index([consultaId])
  @@index([procedureId])
  @@index([treatmentStepId])
  @@map("ConsultaProcedimiento")
}

model Adjunto {
  idAdjunto Int @id @default(autoincrement()) @map("idAdjunto")

  // ==== Vínculos clínicos (opcionales) ====
  pacienteId      Int? @map("Paciente_idPaciente")
  consultaId      Int? @map("Consulta_Cita_idCita")
  procedimientoId Int? @map("ConsultaProcedimiento_idConsultaProcedimiento")

  paciente      Paciente?              @relation(fields: [pacienteId], references: [idPaciente], onDelete: SetNull)
  consulta      Consulta?              @relation(fields: [consultaId], references: [citaId], onDelete: SetNull)
  procedimiento ConsultaProcedimiento? @relation(fields: [procedimientoId], references: [idConsultaProcedimiento], onDelete: SetNull)

  // ==== Clasificación clínica ====
  tipo        AdjuntoTipo @map("tipo")
  descripcion String?     @map("descripcion") @db.VarChar(500)

  // ==== Cloudinary / storage ====
  // Clave primaria en storage (lo único realmente necesario para re-hidratar la URL):
  publicId         String     @unique @map("public_id")
  folder           String     @map("folder")
  resourceType     String     @map("resource_type") // "image" | "video" | "raw"
  format           String?    @map("format")
  bytes            Int        @map("bytes")
  width            Int?       @map("width")
  height           Int?       @map("height")
  duration         Float?     @map("duration")
  originalFilename String?    @map("original_filename")
  accessMode       AccessMode @default(AUTHENTICATED) @map("access_mode")

  // Campo derivable: podrías NO persistir la URL; la regeneras firmada cuando la servís.
  // Si quieres cachearla para thumbnails o auditoría, mantené secureUrl:
  secureUrl String @map("secure_url")

  // ==== Seguridad/borrado lógico ====
  isActive        Boolean   @default(true) @map("is_active")
  deletedAt       DateTime? @map("deleted_at")
  deletedByUserId Int?      @map("Usuario_idUsuario_deletedBy")
  deletedBy       Usuario?  @relation(fields: [deletedByUserId], references: [idUsuario])

  // ==== Auditoría ====
  uploadedByUserId Int     @map("Usuario_idUsuario_uploadedBy")
  uploadedBy       Usuario @relation("AdjuntoUploadedBy", fields: [uploadedByUserId], references: [idUsuario])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // ==== Índices ====
  @@index([pacienteId, createdAt])
  @@index([consultaId, createdAt])
  @@index([procedimientoId, createdAt])
  @@index([tipo, createdAt])
  @@index([accessMode, createdAt])
  @@map("Adjunto")
}

model TreatmentPlan {
  idTreatmentPlan Int      @id @default(autoincrement()) @map("idTreatmentPlan")
  pacienteId      Int      @map("Paciente_idPaciente")
  paciente        Paciente @relation(fields: [pacienteId], references: [idPaciente], onDelete: Cascade)

  titulo      String  @map("titulo")
  descripcion String? @map("descripcion")
  isActive    Boolean @default(true) @map("is_active")

  createdByUserId Int     @map("Usuario_idUsuario_createdBy")
  creadoPor       Usuario @relation(fields: [createdByUserId], references: [idUsuario])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  steps TreatmentStep[]

  @@index([pacienteId, isActive])
  @@map("TreatmentPlan")
}

model TreatmentStep {
  idTreatmentStep Int           @id @default(autoincrement()) @map("idTreatmentStep")
  treatmentPlanId Int           @map("TreatmentPlan_idTreatmentPlan")
  plan            TreatmentPlan @relation(fields: [treatmentPlanId], references: [idTreatmentPlan], onDelete: Cascade)

  order Int @map("order")

  // Definición clínica (elige catálogo o texto libre)
  procedureId           Int?                   @map("Procedimiento_idProcedimiento")
  procedimientoCatalogo ProcedimientoCatalogo? @relation(fields: [procedureId], references: [idProcedimiento], onDelete: SetNull)
  serviceType           String?                @map("service_type")

  toothNumber  Int?              @map("tooth_number")
  toothSurface DienteSuperficie? @map("tooth_surface")

  estimatedDurationMin Int?                @map("estimated_duration_min")
  estimatedCostCents   Int?                @map("estimated_cost_cents")
  priority             Int?                @map("priority") // 1..5
  status               TreatmentStepStatus @default(PENDING) @map("status")
  notes                String?             @map("notes")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Ejecución clínica (líneas realizadas que cumplen este step)
  consultaProcedimientos ConsultaProcedimiento[]

  @@unique([treatmentPlanId, order])
  @@index([status])
  @@map("TreatmentStep")
}

// ============== 1) Historia clínica general =================
model ClinicalHistoryEntry {
  idClinicalHistoryEntry Int      @id @default(autoincrement()) @map("idClinicalHistoryEntry")
  pacienteId             Int      @map("Paciente_idPaciente")
  consultaId             Int?     @map("Consulta_Cita_idCita") // vers. histórica por cita (opcional)
  fecha                  DateTime @default(now()) @map("fecha")
  title                  String?  @map("title")
  notes                  String   @map("notes")

  createdByUserId Int      @map("Usuario_idUsuario_createdBy")
  createdBy       Usuario  @relation(fields: [createdByUserId], references: [idUsuario])
  createdAt       DateTime @default(now()) @map("created_at")

  paciente Paciente  @relation(fields: [pacienteId], references: [idPaciente], onDelete: Cascade)
  consulta Consulta? @relation(fields: [consultaId], references: [citaId], onDelete: SetNull)

  @@index([pacienteId, fecha])
  @@index([consultaId])
  @@map("ClinicalHistoryEntry")
}

// ============== 2) Diagnósticos ==============================

enum DiagnosisStatus {
  ACTIVE
  RESOLVED
  RULED_OUT
}

model DiagnosisCatalog {
  idDiagnosisCatalog Int      @id @default(autoincrement()) @map("idDiagnosisCatalog")
  code               String   @unique @map("code") // CIE-10 o código interno
  name               String   @map("name")
  description        String?  @map("description")
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  patientDiagnoses PatientDiagnosis[]

  @@map("DiagnosisCatalog")
}

model PatientDiagnosis {
  idPatientDiagnosis Int               @id @default(autoincrement()) @map("idPatientDiagnosis")
  pacienteId         Int               @map("Paciente_idPaciente")
  diagnosisId        Int?              @map("DiagnosisCatalog_id")
  diagnosisCatalog   DiagnosisCatalog? @relation(fields: [diagnosisId], references: [idDiagnosisCatalog], onDelete: SetNull)

  // si no usás catálogo: libre
  code  String? @map("code")
  label String  @map("label")

  status     DiagnosisStatus @default(ACTIVE) @map("status")
  notedAt    DateTime        @default(now()) @map("noted_at")
  resolvedAt DateTime?       @map("resolved_at")
  notes      String?         @map("notes")

  // quién y dónde se registró
  consultaId      Int?      @map("Consulta_Cita_idCita")
  createdByUserId Int       @map("Usuario_idUsuario_createdBy")
  createdBy       Usuario   @relation(fields: [createdByUserId], references: [idUsuario])
  consulta        Consulta? @relation(fields: [consultaId], references: [citaId], onDelete: SetNull)

  paciente Paciente @relation(fields: [pacienteId], references: [idPaciente], onDelete: Cascade)

  @@index([pacienteId, status, notedAt])
  @@index([consultaId])
  @@map("PatientDiagnosis")
}

// ============== 3) Alergias y medicación =====================

enum AllergySeverity {
  MILD
  MODERATE
  SEVERE
}

model AllergyCatalog {
  idAllergyCatalog Int      @id @default(autoincrement()) @map("idAllergyCatalog")
  name             String   @unique @map("name")
  description      String?  @map("description")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  patientAllergies PatientAllergy[]

  @@map("AllergyCatalog")
}

model PatientAllergy {
  idPatientAllergy Int             @id @default(autoincrement()) @map("idPatientAllergy")
  pacienteId       Int             @map("Paciente_idPaciente")
  allergyId        Int?            @map("AllergyCatalog_id")
  allergyCatalog   AllergyCatalog? @relation(fields: [allergyId], references: [idAllergyCatalog], onDelete: SetNull)

  // libre si no cat
  label    String?         @map("label")
  severity AllergySeverity @default(MODERATE) @map("severity")
  reaction String?         @map("reaction")
  notedAt  DateTime        @default(now()) @map("noted_at")
  isActive Boolean         @default(true) @map("is_active")

  createdByUserId Int     @map("Usuario_idUsuario_createdBy")
  createdBy       Usuario @relation(fields: [createdByUserId], references: [idUsuario])

  paciente Paciente @relation(fields: [pacienteId], references: [idPaciente], onDelete: Cascade)

  @@index([pacienteId, isActive])
  @@map("PatientAllergy")
}

model MedicationCatalog {
  idMedicationCatalog Int      @id @default(autoincrement()) @map("idMedicationCatalog")
  name                String   @unique @map("name")
  description         String?  @map("description")
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  patientMedications PatientMedication[]

  @@map("MedicationCatalog")
}

model PatientMedication {
  idPatientMedication Int                @id @default(autoincrement()) @map("idPatientMedication")
  pacienteId          Int                @map("Paciente_idPaciente")
  medicationId        Int?               @map("MedicationCatalog_id")
  medicationCatalog   MedicationCatalog? @relation(fields: [medicationId], references: [idMedicationCatalog], onDelete: SetNull)

  // libre si no cat
  label    String?   @map("label")
  dose     String?   @map("dose")
  freq     String?   @map("freq")
  route    String?   @map("route")
  startAt  DateTime? @map("start_at")
  endAt    DateTime? @map("end_at")
  isActive Boolean   @default(true) @map("is_active")

  createdByUserId Int     @map("Usuario_idUsuario_createdBy")
  createdBy       Usuario @relation(fields: [createdByUserId], references: [idUsuario])

  paciente Paciente @relation(fields: [pacienteId], references: [idPaciente], onDelete: Cascade)

  @@index([pacienteId, isActive])
  @@map("PatientMedication")
}

// ============== 4) Vitales ==================================
model PatientVitals {
  idPatientVitals Int      @id @default(autoincrement()) @map("idPatientVitals")
  pacienteId      Int      @map("Paciente_idPaciente")
  consultaId      Int?     @map("Consulta_Cita_idCita")
  measuredAt      DateTime @default(now()) @map("measured_at")

  // Lo habitual en sillón (agregá lo que uses)
  heightCm  Int?   @map("height_cm")
  weightKg  Int?   @map("weight_kg")
  bmi       Float? @map("bmi")
  bpSyst    Int?   @map("bp_syst")
  bpDiast   Int?   @map("bp_diast")
  heartRate Int?   @map("heart_rate")

  notes String? @map("notes")

  createdByUserId Int     @map("Usuario_idUsuario_createdBy")
  createdBy       Usuario @relation(fields: [createdByUserId], references: [idUsuario])

  paciente Paciente  @relation(fields: [pacienteId], references: [idPaciente], onDelete: Cascade)
  consulta Consulta? @relation(fields: [consultaId], references: [citaId], onDelete: SetNull)

  @@index([pacienteId, measuredAt])
  @@index([consultaId])
  @@map("PatientVitals")
}

// ============== 5) Odontograma (versionable) =================

enum ToothCondition {
  INTACT
  CARIES
  FILLED
  MISSING
  ROOT_CANAL
  CROWN
  BRIDGE
  IMPLANT
  EXTRACTION_NEEDED
}

model OdontogramSnapshot {
  idOdontogramSnapshot Int      @id @default(autoincrement()) @map("idOdontogramSnapshot")
  pacienteId           Int      @map("Paciente_idPaciente")
  consultaId           Int?     @map("Consulta_Cita_idCita") // si es por cita (recomendado)
  takenAt              DateTime @default(now()) @map("taken_at")
  notes                String?  @map("notes")

  createdByUserId Int     @map("Usuario_idUsuario_createdBy")
  createdBy       Usuario @relation(fields: [createdByUserId], references: [idUsuario])

  paciente Paciente          @relation(fields: [pacienteId], references: [idPaciente], onDelete: Cascade)
  consulta Consulta?         @relation(fields: [consultaId], references: [citaId], onDelete: SetNull)
  entries  OdontogramEntry[]

  @@index([pacienteId, takenAt])
  @@index([consultaId])
  @@map("OdontogramSnapshot")
}

model OdontogramEntry {
  idOdontogramEntry Int               @id @default(autoincrement()) @map("idOdontogramEntry")
  snapshotId        Int               @map("OdontogramSnapshot_id")
  toothNumber       Int               @map("tooth_number") // 1–32 / 51–85
  surface           DienteSuperficie? @map("surface")
  condition         ToothCondition    @default(INTACT) @map("condition")
  notes             String?           @map("notes")

  snapshot OdontogramSnapshot @relation(fields: [snapshotId], references: [idOdontogramSnapshot], onDelete: Cascade)

  @@unique([snapshotId, toothNumber, surface])
  @@index([toothNumber])
  @@map("OdontogramEntry")
}

// ============== 6) Periodontograma (opcional) ================

enum PerioBleeding {
  NONE
  YES
}

model PeriodontogramSnapshot {
  idPeriodontogramSnapshot Int      @id @default(autoincrement()) @map("idPeriodontogramSnapshot")
  pacienteId               Int      @map("Paciente_idPaciente")
  consultaId               Int?     @map("Consulta_Cita_idCita")
  takenAt                  DateTime @default(now()) @map("taken_at")
  notes                    String?  @map("notes")

  createdByUserId Int     @map("Usuario_idUsuario_createdBy")
  createdBy       Usuario @relation(fields: [createdByUserId], references: [idUsuario])

  paciente Paciente                @relation(fields: [pacienteId], references: [idPaciente], onDelete: Cascade)
  consulta Consulta?               @relation(fields: [consultaId], references: [citaId], onDelete: SetNull)
  measures PeriodontogramMeasure[]

  @@index([pacienteId, takenAt])
  @@index([consultaId])
  @@map("PeriodontogramSnapshot")
}

// Convención de sitio periodontal (ejemplo): de 1..6 por diente (DB, B, MB, DL, L, ML) o define un enum
enum PerioSite {
  DB
  B
  MB
  DL
  L
  ML
}

model PeriodontogramMeasure {
  idPeriodontogramMeasure Int       @id @default(autoincrement()) @map("idPeriodontogramMeasure")
  snapshotId              Int       @map("PeriodontogramSnapshot_id")
  toothNumber             Int       @map("tooth_number")
  site                    PerioSite @map("site")

  probingDepthMm Int?           @map("probing_depth_mm")
  bleeding       PerioBleeding? @map("bleeding")
  plaque         Boolean?       @map("plaque")
  mobility       Int?           @map("mobility") // 0..3
  furcation      Int?           @map("furcation") // 0..3

  snapshot PeriodontogramSnapshot @relation(fields: [snapshotId], references: [idPeriodontogramSnapshot], onDelete: Cascade)

  @@unique([snapshotId, toothNumber, site])
  @@index([toothNumber])
  @@map("PeriodontogramMeasure")
}
